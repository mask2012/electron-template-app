
回答的时候用中文
代码注释尽量用中文
先不要写代码,先讨论一下细节,我确认后再生成代码

//编程语言版本
vue:使用2.6.14，请使用这个基于适合这个版本的编程方法


When generating code, please follow these principles:

1. Code Readability
   - Write clean, well-structured code
   - Use meaningful variable and function names
   - Maintain consistent formatting and indentation

2. Documentation
   - Comments must be:
     * Added only when necessary
     * Used to explain:

3. Development Process
   - First think through the problem before writing code
   - Consider the first principles and fundamental requirements
   - Plan the structure and architecture beforehand
   - Break down complex problems into smaller, manageable parts

4. Best Practices
   - Follow language-specific conventions and style guides
   - Implement error handling where appropriate
   - Write maintainable and scalable code
   - Consider performance implications


// General guidelines
Always use Markdown for documentation and README files
Maintain the existing structure of the README.md file

// README.md structure
Maintain the following structure in the README.md file:
  1. Title and Awesome badge
  2. Logo
  3. Short description
  4. "Why .cursorrules?" section
  5. Table of Contents
  6. Rules section
     - Frontend Frameworks and Libraries
     - Backend and Full-Stack
     - Mobile Development
     - CSS and Styling
     - State Management
     - Database and API
     - Testing
     - Build Tools and Development
     - Language-Specific
     - Other
  7. How to Use section
  8. Contributing section
  9. License section

  // Content guidelines
When creating or editing .cursorrules files, focus on project-specific instructions and best practices
Include comments in .cursorrules files to explain complex rules or provide context
Use clear and concise language in all documentation and .cursorrules files
Provide context on what you're building, style guidelines, or info on commonly-used methods

// Optional README for credit and description
Each .cursorrules file may have an accompanying README.md file in its folder
Use this README to provide credit to the original author and a brief description of the .cursorrules file's purpose

// Maintenance and updates
Update the README.md file when adding new .cursorrules files, placing them in the correct category
Ensure all links in the README.md file are relative and correct
When updating the README.md, ensure the table of contents remains accurate
When adding new categories, update both the 'Contents' and 'Rules' sections of the README.md
Regularly review and update categorization as the repository grows

// Best practices
Maintain consistency in capitalization and punctuation throughout the repository
When referencing Cursor AI, always use the correct capitalization and spacing
When adding examples or explanations, focus on practical use cases for Cursor AI users
If a .cursorrules file fits multiple categories, place it in the most relevant one and cross-reference in others if necessary
Keep the 'Other' category for .cursorrules files that don't fit neatly into the main categories

// Additional insights
.cursorrules files are repo-specific "Rules for AI"
.cursorrules files should be placed in the root of the repository
The content of .cursorrules files will be appended to the global "Rules for AI" settings in Cursor
Focus on providing repo-level context and guidelines, not just general coding practices
.cursorrules can include information about project structure, architectural decisions, and commonly used libraries or methods
Consider including rules for handling specific file types or coding patterns unique to your project
Rules can cover both code generation and code understanding aspects for Cursor AI


//Git提交提示
Now, please generate a commit message with Chinese.
Make sure it includes an accurate and informative subject line that succinctly summarizes the key points of the changes, the response must only have commit message content and must have blank line in message template.

Below is the commit message template:

<type>(<scope>): <subject>
// blank line
<body>
// blank line
<footer>

The Header is mandatory, while the Body and Footer are optional.

Regardless of which part, no line should exceed 72 characters (or 100 characters). This is to avoid automatic line breaks affecting aesthetics.

Below is the type Enum:

- feat: new feature
- fix: bug fix
- docs: documentation
- style: formatting (changes that do not affect code execution)
- refactor: refactoring (code changes that are neither new features nor bug fixes)
- test: adding tests
- chore: changes to the build process or auxiliary tools

The body section is a detailed description of this commit and can be split into multiple lines. Here's an example:

More detailed explanatory text, if necessary. Wrap it to about 72 characters or so. 

Further paragraphs come after blank lines.

- Bullet points are okay, too
- Use a hanging indent